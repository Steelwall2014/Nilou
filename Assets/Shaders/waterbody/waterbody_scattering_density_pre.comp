#version 430
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

uniform sampler3D ScatteringLUT_Input;
layout (rgba32f, binding=0) uniform image3D ScatteringDensityLUT_Output;

#include "../include/unit_definitions.incl"
#include "waterbody_constants.incl"
#include "waterbody_definitions.incl"
#include "waterbody_functions.incl"

RadianceSpectrum ComputeScatteringDensity(
    WaterbodyParameters waterbody,
    sampler3D input_scattering_texture,
    Length r, Angle mu, Angle mu_s, Angle nu,
    bool ray_r_mu_intersects_ground) {

    vec3 omega = vec3(sin(mu), 0.0, cos(mu));
    Number sun_dir_x = omega.x == 0.0 ? 0.0 : (cos(nu) - cos(mu) * cos(mu_s)) / omega.x;
    Number sun_dir_y = sqrt(max(sin(mu_s)*sin(mu_s) - sun_dir_x * sun_dir_x, 0.0));
    vec3 omega_s = vec3(sun_dir_x, sun_dir_y, cos(mu_s));

    const int ANGULAR_SAMPLE_COUNT = 16;
    const Angle dphi = pi / Number(ANGULAR_SAMPLE_COUNT);
    const Angle dtheta = pi / Number(ANGULAR_SAMPLE_COUNT);

    vec3 scattering = vec3(0);
    for (int l = 0; l <= ANGULAR_SAMPLE_COUNT; l++)
    {
        Angle theta = (Number(l) + 0.5) * dtheta;
        Number cos_theta = cos(theta);
        Number sin_theta = sin(theta);
        for (int m = 0; m <= 2*ANGULAR_SAMPLE_COUNT; m++)
        {
            Angle phi = (Number(m) + 0.5) * dphi;
            vec3 omega_i =
                vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);
            SolidAngle domega_i = (dtheta / rad) * (dphi / rad) * sin(theta) * sr;
            Angle nu1 = acos(clamp(dot(omega_s, omega_i), -1, 1));
            vec3 in_scattering = GetScattering(waterbody, input_scattering_texture, r, theta, mu_s, nu1, false);
            scattering += in_scattering * domega_i * Phase(waterbody, dot(omega, omega_i)) * waterbody.total_scattering;
        }
    }

    return scattering;
}

RadianceSpectrum ComputeScatteringDensityTexture(
    WaterbodyParameters waterbody,
    sampler3D scattering_texture_input,
    vec3 frag_coord) {
  Length r;
  Angle mu;
  Angle mu_s;
  Angle nu;
  bool ray_r_mu_intersects_ground;
  GetRMuMuSNuFromScatteringTextureFragCoord(waterbody, frag_coord,
      r, mu, mu_s, nu, ray_r_mu_intersects_ground);
  return ComputeScatteringDensity(waterbody, 
      scattering_texture_input, r, mu, mu_s, nu,
      ray_r_mu_intersects_ground);
}


void main()
{
    vec3 frag_coord = vec3(gl_GlobalInvocationID) + vec3(0.5);
    vec3 scattring_density = ComputeScatteringDensityTexture(WATERBODY, ScatteringLUT_Input, frag_coord);
    imageStore(ScatteringDensityLUT_Output, ivec3(gl_GlobalInvocationID), vec4(scattring_density, 0));
}