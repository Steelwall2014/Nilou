#version 430
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

uniform sampler3D ScatteringDensityLUT;
layout (rgba32f, binding=0) uniform image3D ScatteringLUT_Output;

#include "../include/unit_definitions.incl"
#include "waterbody_constants.incl"
#include "waterbody_definitions.incl"
#include "waterbody_functions.incl"

RadianceSpectrum ComputeMultipleScattering(
    WaterbodyParameters waterbody,
    sampler3D input_scattering_density,
    Length r, Angle mu, Angle mu_s, Angle nu,
    bool ray_r_mu_intersects_ground) {

    const int SAMPLE_COUNT = 100;
    Length dx =
        DistanceToNearestWaterbodyBoundary(
            waterbody, r, mu, ray_r_mu_intersects_ground) /
                Number(SAMPLE_COUNT);
    vec3 scattering_sum = vec3(0);
    for (int i = 0; i <= SAMPLE_COUNT; ++i) {
        Length d_i = Number(i) * dx;
        Length r_d = cos(mu) * d_i + r;

        vec3 scattering = GetScattering(waterbody, input_scattering_density, r_d, mu, mu_s, nu, false);

        Number weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;
        scattering_sum += scattering * weight_i * dx * GetTransmittance(waterbody, d_i);
    }
    return scattering_sum;
}

RadianceSpectrum ComputeMultipleScatteringTexture(
    WaterbodyParameters waterbody,
    sampler3D scattering_texture_input,
    vec3 frag_coord) {
  Length r;
  Angle mu;
  Angle mu_s;
  Angle nu;
  bool ray_r_mu_intersects_ground;
  GetRMuMuSNuFromScatteringTextureFragCoord(waterbody, frag_coord,
      r, mu, mu_s, nu, ray_r_mu_intersects_ground);
  return ComputeMultipleScattering(waterbody, 
      scattering_texture_input, r, mu, mu_s, nu,
      ray_r_mu_intersects_ground);
}


void main()
{
    vec3 frag_coord = vec3(gl_GlobalInvocationID) + vec3(0.5);
    vec3 multiscattring = ComputeMultipleScatteringTexture(WATERBODY, ScatteringDensityLUT, frag_coord);
    imageStore(ScatteringLUT_Output, ivec3(gl_GlobalInvocationID), vec4(multiscattring, 0));
}