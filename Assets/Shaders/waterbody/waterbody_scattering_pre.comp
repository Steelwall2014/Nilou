#version 430
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (rgba32f, binding=0) uniform image3D SingleScatteringLUT;
layout (rgba32f, binding=1) uniform image3D SingleScatteringDensityLUT;

#include "../include/unit_definitions.incl"
#include "waterbody_constants.incl"
#include "waterbody_definitions.incl"
#include "waterbody_functions.incl"


void ComputeSingleScatteringIntegrand(
    WaterbodyParameters waterbody,
    Length r, Angle mu, Angle mu_s, Angle nu, Length d,
    out DimensionlessSpectrum transmittance) {
  Length r_d = cos(mu) * d + r;
  Number mu_s_d = mu_s;
  transmittance =
      GetTransmittance(waterbody, d) *
      GetTransmittanceToWaterSurface(
          waterbody, r_d, mu_s_d);
}

void ComputeSingleScattering(
    WaterbodyParameters waterbody,
    Length r, Angle mu, Angle mu_s, Angle nu,
    bool ray_r_mu_intersects_bottom,
    out IrradianceSpectrum singlescattering) {
    
//  const int SAMPLE_COUNT = 100;
//  Length dx = DistanceToNearestWaterbodyBoundary(waterbody, r, mu, ray_r_mu_intersects_bottom) / Number(SAMPLE_COUNT);
//
//  DimensionlessSpectrum transmittance_sum = DimensionlessSpectrum(0.0);
//  for (int i = 0; i <= SAMPLE_COUNT; ++i) {
//    Length d_i = Number(i) * dx;
//    DimensionlessSpectrum transmittance;
//    ComputeSingleScatteringIntegrand(waterbody,
//        r, mu, mu_s, nu, d_i, transmittance);
//    Number weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;
//    transmittance_sum += transmittance * weight_i;
//  }
//  singlescattering = transmittance_sum * dx * Phase(waterbody, cos(nu))*//waterbody.solar_irradiance
//      waterbody.total_scattering;
    float dist = DistanceToNearestWaterbodyBoundary(waterbody, r, mu, ray_r_mu_intersects_bottom);
    float cos_mu = cos(mu);
    float cos_mu_s = cos(mu_s);
    vec3 a = waterbody.total_extinction * (cos_mu_s-cos_mu) / cos_mu_s;
    vec3 b = waterbody.total_extinction * (waterbody.water_depth-r) / cos_mu_s;
    vec3 integral = exp(-b) * (1-exp(-a * dist)) / a;
    singlescattering = integral * Phase(waterbody, cos(nu)) * waterbody.total_scattering;
}

void ComputeSingleScatteringDensity(
    WaterbodyParameters waterbody,
    Length r, Angle mu, Angle mu_s, Angle nu,
    out vec3 singlescattering_density) {

    vec3 transmittance = GetTransmittanceToWaterSurface(waterbody, r, mu_s);
    singlescattering_density = Phase(waterbody, cos(nu)) * waterbody.total_scattering * transmittance;
}

void ComputeSingleScatteringTexture(WaterbodyParameters waterbody, vec3 frag_coord,
    out IrradianceSpectrum singlescattering, out vec3 singlescattering_density) {
    Length r;
    Angle mu;
    Angle mu_s;
    Angle nu;
    bool ray_r_mu_intersects_bottom;
    GetRMuMuSNuFromScatteringTextureFragCoord(waterbody, frag_coord,
        r, mu, mu_s, nu, ray_r_mu_intersects_bottom);
    ComputeSingleScattering(waterbody,
        r, mu, mu_s, nu, ray_r_mu_intersects_bottom, singlescattering);
    vec3 transmittance = GetTransmittanceToWaterSurface(waterbody, r, mu_s);
    singlescattering_density = Phase(waterbody, cos(nu)) * waterbody.total_scattering * transmittance;
}


void main()
{
    IrradianceSpectrum singlescattering;
    vec3 singlescattering_density;
    vec3 frag_coord = vec3(gl_GlobalInvocationID) + vec3(0.5);
    ComputeSingleScatteringTexture(WATERBODY, frag_coord, singlescattering, singlescattering_density);
//    Angle nu;
//    Angle mu_s;
//    Angle mu;
//    Length r;
//    bool ray_r_mu_intersects_bottom;
//    GetRMuMuSNuFromScatteringTextureFragCoord(WATERBODY, frag_coord,
//        r, mu, mu_s, nu, ray_r_mu_intersects_bottom);
//    vec3 transmittance;
//    ComputeSingleScatteringIntegrand(WATERBODY,
//        r, mu, mu_s, nu, 0, transmittance);
//  Length dx =
//      DistanceToNearestWaterbodyBoundary(WATERBODY, r, mu, ray_r_mu_intersects_bottom);
    imageStore(SingleScatteringLUT, ivec3(gl_GlobalInvocationID), vec4(singlescattering, 0));
    imageStore(SingleScatteringDensityLUT, ivec3(gl_GlobalInvocationID), vec4(singlescattering_density, 0));
}