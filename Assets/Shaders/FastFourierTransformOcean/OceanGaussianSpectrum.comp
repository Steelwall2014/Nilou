#version 430
const float PI = 3.14159f;
const float g = 9.80665f;
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
    
layout (rg16f, binding = 0) uniform image2D GaussianRandomRT;

#include "OceanFastFourierTransformParameters.glsl"

//随机种子
uint wangHash(uint seed)
{
    seed = (seed ^ 61) ^(seed >> 16);
    seed *= 9;
    seed = seed ^(seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^(seed >> 15);
    return seed;
}
//计算均匀分布随机数[0,1)
float rand(uint rngState)
{
    // Xorshift算法
    rngState ^= (rngState << 13);
    rngState ^= (rngState >> 17);
    rngState ^= (rngState << 5);
    return rngState / 4294967296.0f;;
}
vec2 gaussian(uvec2 id)
{
    uint rngState = wangHash(id.y * N + id.x);
    float x1 = rand(rngState);
    float x2 = rand(rngState);

    x1 = max(1e-6f, x1);
    x2 = max(1e-6f, x2);
    float g1 = sqrt(-2.0f * log(x1)) * cos(2.0f * PI * x2);
    float g2 = sqrt(-2.0f * log(x1)) * sin(2.0f * PI * x2);

    return vec2(g1, g2);
}
void ComputeGaussianRandom(uvec3 id)
{
    vec2 g = gaussian(id.xy);
    imageStore(GaussianRandomRT, ivec2(id.xy), vec4(g, 0, 0));
}

void main()
{
    ComputeGaussianRandom(gl_GlobalInvocationID);
}