#version 430
const float PI = 3.14159f;
const float g = 9.80665f;
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
    
layout (rg16f, binding = 0) uniform image2D GaussianRandomRT;
layout (rg16f, binding = 1) uniform image2D HeightSpectrumRT;
layout (rg16f, binding = 2) uniform image2D DisplaceXSpectrumRT;
layout (rg16f, binding = 3) uniform image2D DisplaceYSpectrumRT;

#include "OceanFastFourierTransformParameters.glsl"
//随机种子

float dispersion(vec2 k)
{
    return sqrt(g * length(k));
}
//Donelan-Banner方向拓展
float DonelanBannerDirectionalSpreading(vec2 k)
{
    float betaS;
    float omegap = 0.855f * g / WindSpeed;
    float ratio = dispersion(k) / omegap;

    if (ratio < 0.95f)
    {
        betaS = 2.61f * pow(ratio, 1.3f);
    }
    if(ratio >= 0.95f && ratio < 1.6f)
    {
        betaS = 2.28f * pow(ratio, -1.3f);
    }
    if(ratio > 1.6f)
    {
        float epsilon = -0.4f + 0.8393f * exp(-0.567f * log(ratio * ratio));
        betaS = pow(10, epsilon);
    }
    float theta = atan(k.y, k.x) - atan(WindDirection.y, WindDirection.x);

    return betaS / max(1e-7f, 2.0f * tanh(betaS * PI) * pow(cosh(betaS * theta), 2));
}
//计算phillips谱
float phillips(vec2 k)
{
    float V = WindSpeed;
	float L = (V * V) / g;
	float l = L / 1000.0f;				

	float kdotw = dot(k, WindDirection);
	float k2 = max(0.001f, dot(k, k));			

	float P_h = Amplitude * exp(-1.0f / (k2 * L * L)) / (k2 * k2 * k2) * (kdotw * kdotw);

	if (kdotw < 0.0f) {
		P_h *= 0.07f;
	}

	return P_h * exp(-k2 * l * l);
}
vec2 complexMultiply(vec2 c1, vec2 c2)
{
    float a = c1.x * c2.x - c1.y * c2.y;
    float b = c1.x * c2.y + c1.y * c2.x;
    return vec2(a, b);
}
void CreateHeightDisplaceSpectrum(uvec3 id)
{
    float Lxy = DisplacementTextureSize;
    vec2 k = vec2(2.0f * PI * (N/2.f - int(id.x)) / Lxy, 2.0f * PI * (N/2.f - int(id.y)) / Lxy);

    vec2 gaussian = imageLoad(GaussianRandomRT, ivec2(id.xy)).xy;

    vec2 hTilde0 = gaussian * sqrt(abs(phillips(k)) / 2.0f);
    vec2 hTilde0Conj = gaussian * sqrt(abs(phillips(-k)) / 2.0f);
    hTilde0Conj.y *= -1.0f;

    float omega = dispersion(k) * Time;
    float c = cos(omega);
    float s = sin(omega);
    
    vec2 h1 = complexMultiply(hTilde0, vec2(c, s));
    vec2 h2 = complexMultiply(hTilde0Conj, vec2(c, -s));
    vec2 HTilde = h1 + h2;
    
	k.x = float(N / 2 - id.x);
	k.y = float(N / 2 - id.y);
    k /= max(0.001f, length(k));

    vec2 KxHTilde = complexMultiply(vec2(0, -k.x), HTilde);
    vec2 kyHTilde = complexMultiply(vec2(0, -k.y), HTilde);
    imageStore(DisplaceXSpectrumRT, ivec2(id.xy), vec4(KxHTilde, 0, 0));
    imageStore(DisplaceYSpectrumRT, ivec2(id.xy), vec4(kyHTilde, 0, 0));
    imageStore(HeightSpectrumRT, ivec2(id.xy), vec4(HTilde, 0, 0));
}

void main()
{
    CreateHeightDisplaceSpectrum(gl_GlobalInvocationID);
}