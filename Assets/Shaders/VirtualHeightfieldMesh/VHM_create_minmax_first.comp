#version 430
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

uniform sampler2D HeightMap;
layout(rg16f, binding=2) uniform image2D OutMinMaxMap;

layout (std140) uniform FQuadTreeParameters {
    uvec2   NodeCount;
    uint    LODNum;
    uint    NumQuadsPerPatch;
    uint    NumPatchesPerNode;
};

//uniform float PatchOriginalMeterSize;   // 最小的patch的大小

//uniform float HeightMapMeterSize;   // 一整张HeightMap的大小

void main()
{
    vec2 PatchOriginalMeterSize = vec2(NumQuadsPerPatch);
    vec2 HeightMapMeterSize = NumQuadsPerPatch * NumPatchesPerNode * NodeCount;
    vec2 patch_upperleft_uv = vec2(gl_GlobalInvocationID.xy) * PatchOriginalMeterSize / HeightMapMeterSize;
    vec2 patch_upperright_uv = (vec2(gl_GlobalInvocationID.xy) + vec2(0, 1)) * PatchOriginalMeterSize / HeightMapMeterSize;
    vec2 patch_lowerleft_uv = (vec2(gl_GlobalInvocationID.xy) + vec2(1, 0)) * PatchOriginalMeterSize / HeightMapMeterSize;
    vec2 patch_lowerright_uv = (vec2(gl_GlobalInvocationID.xy) + vec2(1, 1)) * PatchOriginalMeterSize / HeightMapMeterSize;
    vec2 patch_center_uv = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5, 0.5)) * PatchOriginalMeterSize / HeightMapMeterSize;

    float ul_height = texture(HeightMap, patch_upperleft_uv).r;
    float ur_height = texture(HeightMap, patch_upperright_uv).r;
    float ll_height = texture(HeightMap, patch_lowerleft_uv).r;
    float lr_height = texture(HeightMap, patch_lowerright_uv).r;
    float center_height = texture(HeightMap, patch_center_uv).r;

    float min_height = min(ul_height, min(ur_height, min(ll_height, min(center_height, lr_height))));
    float max_height = max(ul_height, max(ur_height, max(ll_height, max(center_height, lr_height))));
    imageStore(OutMinMaxMap, ivec2(gl_GlobalInvocationID.xy), vec4(min_height, max_height, 0, 0));
}