#version 430
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
    
uniform sampler2D Heightfield;
layout (rgba16f, binding = 0) uniform image2D NormalTexture;
layout (rgba16f, binding = 1) uniform image2D TangentTexture;

layout (std140, binding = 2) uniform FBuildNormalTangentBlock {
    uint HeightfieldWidth;
    uint HeightfieldHeight;
    vec2 PixelMeterSize;
};

#include "../include/functions.glsl"

void CreateNormalAndTangent(ivec3 id)
{
    vec2 uvX1 = (vec2(id.x - 1, id.y) + vec2(0.5)) / vec2(HeightfieldWidth, HeightfieldHeight);
    vec2 uvX2 = (vec2(id.x + 1, id.y) + vec2(0.5)) / vec2(HeightfieldWidth, HeightfieldHeight);
    vec2 uvY1 = (vec2(id.x, id.y - 1) + vec2(0.5)) / vec2(HeightfieldWidth, HeightfieldHeight);
    vec2 uvY2 = (vec2(id.x, id.y + 1) + vec2(0.5)) / vec2(HeightfieldWidth, HeightfieldHeight);

    float x1_displace = texture(Heightfield, uvX1).r;
    float x2_displace = texture(Heightfield, uvX2).r;
    float y1_displace = texture(Heightfield, uvY1).r;
    float y2_displace = texture(Heightfield, uvY2).r;

    vec3 tangentX = vec3(2*PixelMeterSize.x, 0, x2_displace-x1_displace);
    vec3 tangentY = vec3(0, 2*PixelMeterSize.y, y2_displace-y1_displace);

    vec3 normal = normalize(cross(tangentX, tangentY));

    imageStore(NormalTexture, id.xy, vec4(normal, 0));

    imageStore(TangentTexture, id.xy, vec4(normalize(tangentX), -1));
}

void main()
{
    CreateNormalAndTangent(ivec3(gl_GlobalInvocationID));
}