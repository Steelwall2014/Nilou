#version 430
const float PI = 3.14159f;
const float g = 9.80665f;
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
    
layout (rgba32f, binding = 0) uniform image2D InputRT;
layout (rgba32f, binding = 1) uniform image2D OutputRT;

uniform uint Ns;
//uniform uint N;
uniform uint N;
uniform int FUNCTION;

vec2 complexMultiply(vec2 c1, vec2 c2)
{
    float a = c1.x * c2.x - c1.y * c2.y;
    float b = c1.x * c2.y + c1.y * c2.x;
    return vec2(a, b);
}
vec2 exp_theta(float theta) {
    return vec2(cos(theta), sin(theta));
}
void FFTHorizontal(uvec3 id)
{
    ivec2 l_in = ivec2(id.xy);
    ivec2 r_in = ivec2(id.xy);
    l_in.x = int(floor(id.x / (Ns*2)) * Ns + id.x % Ns);
    r_in.x = l_in.x + int(N) / 2;

    float theta = 2.0f * PI / (Ns * 2.0f) * (id.x % (Ns * 2));
    vec2 w = exp_theta(theta);
    if (Ns * 2 == N)
        w *= -1;

    vec2 f0 = imageLoad(InputRT, l_in).xy;
    vec2 f1 = imageLoad(InputRT, r_in).xy;

    vec2 res = f0 + complexMultiply(w, f1);
    
//    if (Ns * 2 == N)
//    {
//        int x = int(id.x - N / 2);
//        res *= ((x + 1) % 2) * 1 + (x % 2) * (-1);
//    }
    imageStore(OutputRT, ivec2(id), vec4(res, 0, 0));
}
void FFTVertical(uvec3 id)
{
    ivec2 l_in = ivec2(id.xy);
    ivec2 r_in = ivec2(id.xy);
    l_in.y = int(floor(id.y / (Ns*2)) * Ns + id.y % Ns);
    r_in.y = l_in.y + int(N) / 2;

    float theta = 2.0f * PI / (Ns * 2.0f) * (id.y % (Ns * 2));
    vec2 w = exp_theta(theta);
    if (Ns * 2 == N)
        w *= -1;

    vec2 f0 = imageLoad(InputRT, l_in).xy;
    vec2 f1 = imageLoad(InputRT, r_in).xy;

    vec2 res = f0 + complexMultiply(w, f1);
    
//    if (Ns * 2 == N)
//    {
//        int x = int(id.y - N / 2);
//        res *= ((x + 1) % 2) * 1 + (x % 2) * (-1);
//    }

    imageStore(OutputRT, ivec2(id), vec4(res, 0, 0));
}

void main()
{
    switch (FUNCTION)
    {
    case 0:
    case 1:
        FFTHorizontal(gl_GlobalInvocationID);
        break;
    case 2:
    case 3:
        FFTVertical(gl_GlobalInvocationID);
        break;
    };
}