#version 430
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
    
#include "../include/Macros.glsl"
layout (binding=0) uniform sampler2D TransmittanceLUT;
layout (binding=1) uniform sampler3D ScatteringDensityLUT;
layout (rgba32f, binding=2) uniform image3D DeltaScatteringLUT;
layout (rgba32f, binding=3) uniform image3D MultiScatteringLUT;

#include "atmosphere_functions.glsl"

RadianceSpectrum ComputeMultipleScattering(
    AtmosphereParameters atmosphere,
    TransmittanceTexture transmittance_texture,
    ScatteringDensityTexture scattering_density_texture,
    Length r, Number mu, Number mu_s, Number nu,
    bool ray_r_mu_intersects_ground) {

  // Number of intervals for the numerical integration.
  const int SAMPLE_COUNT = 50;
  // The integration step, i.e. the length of each integration interval.
  Length dx =
      DistanceToNearestAtmosphereBoundary(
          atmosphere, r, mu, ray_r_mu_intersects_ground) /
              Number(SAMPLE_COUNT);
  // Integration loop.
  RadianceSpectrum rayleigh_mie_sum =
      RadianceSpectrum(0.0 * watt_per_square_meter_per_sr_per_nm);
  for (int i = 0; i <= SAMPLE_COUNT; ++i) {
    Length d_i = Number(i) * dx;

    // The r, mu and mu_s parameters at the current integration point (see the
    // single scattering section for a detailed explanation).
    Length r_i =
        ClampRadius(atmosphere, sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r));
    Number mu_i = ClampCosine((r * mu + d_i) / r_i);
    Number mu_s_i = ClampCosine((r * mu_s + d_i * nu) / r_i);

    // The Rayleigh and Mie multiple scattering at the current sample point.
    RadianceSpectrum rayleigh_mie_i =
        GetScattering(
            atmosphere, scattering_density_texture, r_i, mu_i, mu_s_i, nu,
            ray_r_mu_intersects_ground) *
        GetTransmittance(
            atmosphere, transmittance_texture, r, mu, d_i,
            ray_r_mu_intersects_ground) *
        dx;
    // Sample weight (from the trapezoidal rule).
    Number weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;
    rayleigh_mie_sum += rayleigh_mie_i * weight_i;
  }
  return rayleigh_mie_sum;
}

RadianceSpectrum ComputeMultipleScatteringTexture(
    AtmosphereParameters atmosphere,
    TransmittanceTexture transmittance_texture,
    ScatteringDensityTexture scattering_density_texture,
    vec3 frag_coord, out Number nu) {
  Length r;
  Number mu;
  Number mu_s;
  bool ray_r_mu_intersects_ground;
  GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, frag_coord,
      r, mu, mu_s, nu, ray_r_mu_intersects_ground);
  return ComputeMultipleScattering(atmosphere, transmittance_texture,
      scattering_density_texture, r, mu, mu_s, nu,
      ray_r_mu_intersects_ground);
}

void main()
{
    Number nu;
    vec3 frag_coord = vec3(gl_GlobalInvocationID) + vec3(0.5);
    RadianceSpectrum spectrum = ComputeMultipleScatteringTexture(ATMOSPHERE, TransmittanceLUT, ScatteringDensityLUT, frag_coord, nu);
    imageStore(DeltaScatteringLUT, ivec3(gl_GlobalInvocationID), vec4(spectrum, 0));
    spectrum += imageLoad(MultiScatteringLUT, ivec3(gl_GlobalInvocationID)).rgb;
    imageStore(MultiScatteringLUT, ivec3(gl_GlobalInvocationID), vec4(spectrum, 0));
}