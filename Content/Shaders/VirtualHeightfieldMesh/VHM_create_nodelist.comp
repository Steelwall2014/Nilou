#version 430
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

#include "VHM_MinMaxLODNum.glsl"
#include "VHM_WorldLODParam.glsl"

layout(binding = 0) uniform atomic_uint index_B;
layout(binding = 1) uniform atomic_uint index_Final;

layout(std430, binding=2) readonly buffer NodeIDs_TempA_Buffer{
    uvec2 NodeIDs_TempA[];
};
layout(std430, binding=3) writeonly buffer NodeIDs_TempB_Buffer{
    uvec2 NodeIDs_TempB[];
};
layout(std430, binding=4) writeonly buffer NodeIDs_Final_Buffer{
    uvec4 NodeIDs_Final[];
};
layout(std430, binding=5) readonly buffer LODParams_Buffer{
    WorldLODParam LODParams[];
};
layout(std430, binding=6) writeonly buffer NodeDescription_Buffer{
    uint NodeDevided[];
};

layout(std140, binding=7) uniform FCreateNodeListBlock {
    uint MaxLOD;
    uint PassLOD;
    float ScreenSizeDenominator;
};

layout (std140, binding=8) uniform FPrimitiveShaderParameters {
    dmat4 LocalToWorld;
	dmat4 ModelToLocal;
};

#include "../include/ViewShaderParameters.glsl"

#include "../include/Macros.glsl"
layout (binding=9) uniform sampler2D MinMaxMap;


//float GetNodeSize(uint lod)
//{
//    return LODParams[lod].NodeMeterSize;
//}
dvec4 GetNodePositionWS(uvec2 nodeLoc, uint lod)
{
    vec2 xy_center_coord = (vec2(nodeLoc) + vec2(0.5)) * vec2(LODParams[lod].NodeMeterSize_x, LODParams[lod].NodeMeterSize_y);
    vec2 uv = (vec2(nodeLoc) + vec2(0.5)) / vec2(LODParams[lod].NodeSideNum_x, LODParams[lod].NodeSideNum_y);
    vec2 minmax = textureLod(MinMaxMap, uv, float(lod+3)).rg;
    float height = (minmax.r + minmax.g) / 2;
    return LocalToWorld * dvec4(xy_center_coord, height, 1);
}
bool MeetScreenSize(uvec2 nodeLoc, uint lod){
    dvec4 positionWS = GetNodePositionWS(nodeLoc, lod);
    double dis = distance(dvec3(CameraPosition), dvec3(positionWS));
    dvec2 scale_xy;
    scale_xy.x = sqrt(LocalToWorld[0][0]*LocalToWorld[0][0] + LocalToWorld[0][1]*LocalToWorld[0][1] + LocalToWorld[0][2]*LocalToWorld[0][2]);
    scale_xy.y = sqrt(LocalToWorld[1][0]*LocalToWorld[1][0] + LocalToWorld[1][1]*LocalToWorld[1][1] + LocalToWorld[1][2]*LocalToWorld[1][2]);
    double nodeSize = max(LODParams[lod].NodeMeterSize_x*scale_xy.x, LODParams[lod].NodeMeterSize_y*scale_xy.y);

//    float ScreenSize = nodeSize * CameraResolution.y / (dis * ScreenSizeDenominator);
//    return ScreenSize < 500;
    double f = (nodeSize * 2.5) / dis;
    return f <= 1;
}

bool IsBoxOutSidePlane(const dvec4 plane, const dvec3 Center, const mat3 HalfAxes)
{
    const vec3 normal = vec3(plane.xyz);

    const vec3 boxVertex1 = HalfAxes[0] + HalfAxes[1] + HalfAxes[2];
    const vec3 boxVertex2 = -HalfAxes[0] + HalfAxes[1] + HalfAxes[2];
    const vec3 boxVertex3 = HalfAxes[0] - HalfAxes[1] + HalfAxes[2];
    const vec3 boxVertex4 = HalfAxes[0] + HalfAxes[1] - HalfAxes[2];
    const float radEffective1 = abs(dot(normal, boxVertex1));
    const float radEffective2 = abs(dot(normal, boxVertex2));
    const float radEffective3 = abs(dot(normal, boxVertex3));
    const float radEffective4 = abs(dot(normal, boxVertex4));
    const double radEffective = max(radEffective1, max(radEffective2, max(radEffective3, radEffective4)));
    const double distanceToPlane = dot(plane.xyz, Center) + plane.w;

    return distanceToPlane <= -radEffective;
}

bool IsBoxOutSideFrustum(const dvec4 Planes[6], const dvec3 Center, const mat3 HalfAxes)
{
    return 
        IsBoxOutSidePlane(Planes[0], Center, HalfAxes) || 
        IsBoxOutSidePlane(Planes[1], Center, HalfAxes) || 
        IsBoxOutSidePlane(Planes[2], Center, HalfAxes) || 
        IsBoxOutSidePlane(Planes[3], Center, HalfAxes);
}

void main()
{
    uvec2 nodeLoc;
    if (PassLOD == MaxLOD)
    {
        uint i = gl_GlobalInvocationID.x / LODParams[PassLOD].NodeSideNum_x;
        uint j = gl_GlobalInvocationID.x % LODParams[PassLOD].NodeSideNum_x;
        nodeLoc = uvec2(i, j);//NodeIDs_TempA[gl_GlobalInvocationID.x];
    }
    else
    {
        nodeLoc = NodeIDs_TempA[gl_GlobalInvocationID.x];
    }
    uint index = fromNodeLoctoNodeDescriptionIndex(nodeLoc, PassLOD, LODParams[PassLOD]);
    if(PassLOD > 0 && !MeetScreenSize(nodeLoc, PassLOD)){
        //divide
        uint i = atomicCounterIncrement(index_B);
        NodeIDs_TempB[i] = nodeLoc * 2;
        i = atomicCounterIncrement(index_B);
        NodeIDs_TempB[i] = nodeLoc * 2 + uvec2(1,0);
        i = atomicCounterIncrement(index_B);
        NodeIDs_TempB[i] = nodeLoc * 2 + uvec2(0,1);
        i = atomicCounterIncrement(index_B);
        NodeIDs_TempB[i] = nodeLoc * 2 + uvec2(1,1);
        NodeDevided[index] = 1;
    }
    else
    {
        // 这里的剪裁也许可以提前到if的前面，但是似乎帧率没有提升
        NodeDevided[index] = 0;
        
        vec2 node_size = vec2(LODParams[PassLOD].NodeMeterSize_x, LODParams[PassLOD].NodeMeterSize_y);
        vec2 node_offset = vec2(nodeLoc) * node_size;
        vec2 MinMax_uv = (vec2(nodeLoc) + vec2(0.5)) / vec2(LODParams[PassLOD].NodeSideNum_x, LODParams[PassLOD].NodeSideNum_y);
        vec2 MinMax = textureLod(MinMaxMap, MinMax_uv, PassLOD+3).rg;

        // Make it a little larger to get some redundancy
        mat3 HalfAxes = 1.1 * mat3(LocalToWorld) * mat3(
            vec3(node_size.x, 0, 0)*0.5, 
            vec3(0, node_size.y, 0)*0.5, 
            vec3(0, 0, MinMax.g-MinMax.r)*0.5);
        dvec3 BoxCenter = dvec3(LocalToWorld * dvec4(node_offset+node_size/2, (MinMax.r+MinMax.g)/2, 1));
        bool bFrustumCulled = IsBoxOutSideFrustum(FrustumPlanes, BoxCenter, HalfAxes);

        if (bFrustumCulled)
            return;
        
        uint i = atomicCounterIncrement(index_Final);
        NodeIDs_Final[i].x = nodeLoc.x;
        NodeIDs_Final[i].y = nodeLoc.y;
        NodeIDs_Final[i].z = PassLOD;
        
    }
}