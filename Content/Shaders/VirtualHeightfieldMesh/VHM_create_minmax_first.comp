#version 430
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#include "../include/Macros.glsl"
layout (binding=0) uniform sampler2D HeightMap;
layout(rg16f, binding=1) uniform image2D OutMinMaxMap;

layout (std140, binding=2) uniform FQuadTreeParameters {
    uvec2   NodeCount;
    uint    LODNum;
    uint    NumQuadsPerPatch;
    uint    NumPatchesPerNode;
	uint	NumHeightfieldTextureMipmap;
};

layout (std140, binding=2) uniform FBuildMinMaxBlock {
    uvec2 Offset;
};

void main()
{
    vec2 PatchOriginalMeterSize = vec2(NumQuadsPerPatch);
    vec2 HeightMapMeterSize = NumQuadsPerPatch * NumPatchesPerNode * NodeCount;
    vec2 patch_uv = vec2(gl_GlobalInvocationID.xy+Offset) * PatchOriginalMeterSize / HeightMapMeterSize;
    float patch_height = texture(HeightMap, patch_uv).r;
    float min_height = patch_height;
    float max_height = patch_height;
    int sample_x = 100;
    int sample_y = 100;
    for (int i = 0; i <= sample_x; i++)
    {
        for (int j = 0; j <= sample_y; j++)
        {
            patch_uv = (vec2(gl_GlobalInvocationID.xy+Offset) + vec2(i, j)/vec2(sample_x, sample_y)) * PatchOriginalMeterSize / HeightMapMeterSize;
            patch_height = texture(HeightMap, patch_uv).r;
            max_height = max(max_height, patch_height);
            min_height = min(min_height, patch_height);
        }
    }
    imageStore(OutMinMaxMap, ivec2(gl_GlobalInvocationID.xy+Offset), vec4(min_height, max_height, 0, 0));
}