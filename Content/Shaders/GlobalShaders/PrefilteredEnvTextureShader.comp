#version 460
#include "../include/Macros.glsl"

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (binding=0) uniform samplerCube EnvironmentTexture;

layout (rgba16f, binding=1) uniform imageCube PrefilteredTexture;

layout (std140, binding=2) uniform PrefilteredEnvTextureShaderBlock {
    int TextureSize;
    float roughness;
};

#include "../include/Maths.glsl"
#include "../include/functions.glsl"

vec3 ForwardVectors[6] = {
    vec3(1, 0, 0), 
    vec3(-1, 0, 0), 
    vec3(0, 0, 1), 
    vec3(0, 0, -1), 
    vec3(0, 1, 0), 
    vec3(0, -1, 0), 
};
vec3 UpVectors[6] = {
    vec3(0, 0, -1), 
    vec3(0, 0, -1), 
    vec3(0, 1, 0), 
    vec3(0, -1, 0), 
    vec3(0, 0, -1), 
    vec3(0, 0, -1), 
};
    
float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}  

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness*roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);

    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

void main()
{
    for (int i = 0; i < 6; i++)
    {
        vec3 up      = UpVectors[i];
        vec3 forward = ForwardVectors[i];
        vec3 right   = cross(up, forward);
        vec3 center = forward;
        vec3 lower_left = center - up - right;
        vec3 N = lower_left + (gl_GlobalInvocationID.x*2.0/TextureSize)*right + (gl_GlobalInvocationID.y*2.0/TextureSize)*up;
        vec3 R = N;
        vec3 V = R;
        right = cross(up, N);
        up = cross(N, right);

        const uint SAMPLE_COUNT = 1024u;
        float totalWeight = 0.0;   
        vec3 prefilteredColor = vec3(0.0);     
        for(uint i = 0u; i < SAMPLE_COUNT; ++i)
        {
            vec2 Xi = Hammersley(i, SAMPLE_COUNT);
            vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
            vec3 L  = normalize(2.0 * dot(V, H) * H - V);

            float NdotL = max(dot(N, L), 0.0);
            if(NdotL > 0.0)
            {
                prefilteredColor += mytextureCube(EnvironmentTexture, L).rgb * NdotL;
                totalWeight      += NdotL;
            }
        }
        prefilteredColor = prefilteredColor / totalWeight;

        imageStore(PrefilteredTexture, ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, i), vec4(prefilteredColor, 0));
    }
}