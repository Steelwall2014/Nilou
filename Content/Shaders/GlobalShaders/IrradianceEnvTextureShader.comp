#version 460

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0) uniform samplerCube EnvironmentTexture;

layout (rgba16f, binding = 1) uniform imageCube IrradianceTexture;

#include "../include/Maths.glsl"
#include "../include/functions.glsl"

vec3 ForwardVectors[6] = {
    vec3(1, 0, 0), 
    vec3(-1, 0, 0), 
    vec3(0, 0, 1), 
    vec3(0, 0, -1), 
    vec3(0, 1, 0), 
    vec3(0, -1, 0), 
};
vec3 UpVectors[6] = {
    vec3(0, 0, -1), 
    vec3(0, 0, -1), 
    vec3(0, 1, 0), 
    vec3(0, -1, 0), 
    vec3(0, 0, -1), 
    vec3(0, 0, -1), 
};

layout (std140) uniform IrradianceEnvTextureShaderBlock {
    int TextureSize;
};
void main()
{
    for (int i = 0; i < 6; i++)
    {
        vec3 up      = UpVectors[i];
        vec3 forward = ForwardVectors[i];
        vec3 right   = cross(up, forward);
        vec3 center = forward;
        vec3 lower_left = center - up - right;
        vec3 N = lower_left + (gl_GlobalInvocationID.x*2.0/TextureSize)*right + (gl_GlobalInvocationID.y*2.0/TextureSize)*up;
        right = cross(up, N);
        up = cross(N, right);

        vec3 irradiance = vec3(0.0); 
        float sampleDelta = 0.025;

        float nrSamples = 0.0; 
        for(float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)
        {
            for(float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)
            {
                // spherical to cartesian (in tangent space)
                vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
                // tangent space to world
                vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N; 

                irradiance += mytextureCube(EnvironmentTexture, sampleVec).rgb * cos(theta) * sin(theta);
                nrSamples++;
            }
        }
        irradiance = PI * irradiance * (1.0 / float(nrSamples));

        imageStore(IrradianceTexture, ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, i), vec4(irradiance, 0));
    }
}